// 打包某个库到JCenter
// ..\gradlew.bat clean build bintrayUpload -PbintrayUser=Liux -PbintrayKey=xxxxx -PdryRun=false --info
// 打包某个库到本地
// ..\gradlew.bat clean build publishToMavenLocal
// 打包某个库到私服
// ..\gradlew.bat clean build uploadArchives

// Library 升级快速验证方法:
// 1. 升级/修复/优化代码
// 2. 改变版本为快照版(x.y.z-SNAPSHOT)
// 3. 发布到本地 Maven 仓库
// 4. 测试项目开启仓库(mavenLocal)并引用快照版本
// 5. 测试项目先刷新文件系统,再执行 Gradle 依赖刷新(点击按钮)
// 6. 视情况,如果测试项目出现引用不正确(查看源码IDE会提醒源码对不上class文件)则删除测试项目".idea"文件夹下的"libraries"文件夹,关闭再重新打开项目即可

// 当项目作为 submodule 时则不执行下面的代码
if (rootProject.projectDir != project.projectDir.parentFile) return

// release to JCenter
// https://github.com/novoda/bintray-release/wiki
//apply plugin: 'com.novoda.bintray-release'
//publish {
//    repoName = 'android'
//    userOrg = ''
//    groupId = rootProject.getLibraryGroupId()
//    artifactId = project.getLibraryArtifactId()
//    uploadName = 'lib-' + project.getLibraryArtifactId()
//    publishVersion = project.getLibraryVersionName()
//    licences = [rootProject.getLibraryLicense()]
//    desc = ''
//    website = rootProject.getLibraryVCSUrl()
//}

// release to Maven Repositories
apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'http://domain/repository/path/') {
                Properties properties = new Properties()
                InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
                properties.load(inputStream)
                def uploadName = properties.getProperty('uploadUser')
                def uploadPassword = properties.getProperty('uploadPassword')
                inputStream.close()

                authentication(userName:uploadName, password:uploadPassword)
            }
            pom.project {
                groupId = rootProject.getLibraryGroupId()
                artifactId = project.getLibraryArtifactId()
                version = project.getLibraryVersionName()

                name project.name
                packaging 'aar'

                scm {
                    url rootProject.getLibraryVCSUrl()
                }

                licenses {
                    license {
                        name rootProject.getLibraryLicense()
                    }
                }
            }
        }
    }
}
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}
task androidJavaDoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.encoding "UTF-8"
    options.charSet 'UTF-8'
    options.author true
    options.version true
    failOnError false
}
task androidJavaDocJar(type: Jar, dependsOn: androidJavaDoc) {
    classifier = 'javadoc'
    from androidJavaDoc.destinationDir
}
task copyDoc(type: Copy) {
    from "${buildDir}/docs/"
    into "docs"
}
artifacts {
    archives androidSourcesJar
    archives androidJavaDocJar
}